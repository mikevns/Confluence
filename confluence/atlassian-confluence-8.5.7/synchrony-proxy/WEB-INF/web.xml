<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <display-name>Synchrony Proxy</display-name>
    <description>Synchrony Proxy Web App</description>

    <filter>
        <filter-name>forwardedHeaderFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <async-supported>true</async-supported>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>forwardedHeaderFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>synchronyProxyFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <async-supported>true</async-supported>
        <init-param> <!-- enforce invocation of the Filter.init and Filter.destroy lifecycle methods on the target bean -->
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>synchronyProxyFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- redirect all 500 errors to an error page to prevent potentially leaking sensitive header values -->
    <error-page>
        <error-code>500</error-code>
        <location>/500page.jsp</location>
    </error-page>

    <listener>
        <listener-class>com.atlassian.synchrony.proxy.web.InitialServletContextListener</listener-class>
    </listener>

    <!-- Keep this servlet as the last to load -->
    <servlet>
        <servlet-name>final-servlet</servlet-name>
        <servlet-class>com.atlassian.synchrony.proxy.web.ReadyToServeServlet</servlet-class>
        <load-on-startup>100</load-on-startup>
    </servlet>
</web-app>
