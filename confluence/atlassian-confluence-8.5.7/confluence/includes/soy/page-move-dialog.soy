{namespace Confluence.Templates.MovePage}

/**
 * @param spaceKey default value of space key
 * @param spaceName default value of space name
 * @param canMoveBetweenSpaces true if the user can move the page between spaces
 * @param canMoveHierarchyBetweenSpaces true if the user can move the page hierarchy between spaces
 * @param parentPageTitle title of the parent page, if any
 */
{template .movePageAdvancedPanel}
<div class="row information">
        <div class="inner">
            <div class="element">
                {getText('move.page.dialog.location.description')}
            </div>
        </div>
    </div>
        <form class="aui" onsubmit="return false;" autocomplete="off">
	        <fieldset>
	            <legend class="assistive"><span>{getText('accessibility.page.location.dialog.known.location.legend')}</span></legend>
	            <div class="field-group">
	                <label for="new-space">{getText('move.page.dialog.location.space')}</label>
	                <div class="value new-space-value">
	                    <input id="new-space-key" name="new-space-key" type="hidden" value="{$spaceKey}">
	                     {if $canMoveBetweenSpaces and $canMoveHierarchyBetweenSpaces}
	                        <span class="space-input">
	                            <input id="new-space" name="new-space" value="{$spaceName}" class="text long-field">
	                        </span>
                            <div class="description hidden">{getText('move.page.dialog.location.space.description')}</div>
	                    {else}
	                        <span class="space-input">
	                            <input id="new-space" name="new-space" value="{$spaceName}" disabled="disabled" class="text long-field">
	                        </span>
	                        {if not $canMoveBetweenSpaces}
                                <div class="description warning">{getText('tip.cannot.move.page.between.spaces')}</div>
                            {else}
                                <div class="description warning">{getText('tip.cannot.move.page.between.spaces.removeown')}</div>
                            {/if}
	                    {/if}
	                    <div class="new-space-dropdown aui-dd-parent autocomplete"></div>
	                </div>
	            </div>
	            <div class="field-group">
	                <label for="new-parent-page">{getText('move.page.dialog.location.parent.page')}</label>
	                <div class="value new-parent-page-value">
	                    <span class="page-input">
	                        <input id="new-parent-page" name="new-parent-page" value="{$parentPageTitle}" class="text long-field">
	                    </span>
                        <div class="description">{getText('move.page.dialog.location.parent.page.description')}</div>
	                    <div class="new-parent-page-dropdown aui-dd-parent autocomplete"></div>
	                </div>
	            </div>
	        </fieldset>
        </form>
    <div class="location-info">
        <div class="row">
            <label>{getText('move.page.dialog.breadcrumb.current')}</label>
            <div class="value breadcrumbs-container">
                <div class="breadcrumbs-line">
                    <ul id="current-parent-breadcrumbs" class="breadcrumbs">
                    </ul>
                </div>
            </div>
        </div>
        <div class="row">
            <label>{getText('move.page.dialog.breadcrumb.new')}</label>
            <div class="value breadcrumbs-container">
                <div class="breadcrumbs-line">
                    <ul id="new-parent-breadcrumbs" class="breadcrumbs">
                    </ul>
                </div>
            </div>
        </div>
    </div>
{/template}

/**
 * @param spaceKey default value of space key
 * @param spaceName default value of space name
 * @param canMoveBetweenSpaces true if the user can move the page between spaces
 * @param canMoveHierarchyBetweenSpaces true if the user can move the page hierarchy between spaces
 */
{template .movePageSearchPanel}
    <div class="row information">
        <div class="inner">
            <div class="element">{getText('tip.edit.movepage.search')}</div>
        </div>
    </div>
    <div id="move-page-search-container" class="row">
        <form class="aui" onsubmit="return false;">
            <fieldset>
                <legend class="assistive"><span>{getText('accessibility.page.location.dialog.search.legend')}</span></legend>
                <div class="field-group">
                    <label  for="move-page-search-space" class="assistive">{getText('accessibility.page.location.dialog.search.space.label')}</label>
                        {if $canMoveBetweenSpaces and $canMoveHierarchyBetweenSpaces}
                            <select id="move-page-search-space" class="search-space select long-field">
                                <option value="conf_all" selected="selected">{getText('inspace.allspace')}</option>
                                <option value="{$spaceKey}">{$spaceName}</option>
                            </select>
                        {else}
                            <select id="move-page-search-space" class="search-space select" disabled="disabled">
                                <option value="{$spaceKey}" selected="selected">{$spaceName}</option>
                            </select>
                        {/if}
                    </div>
                    <div class="field-group">
                        <label  for="move-page-search-query" class="assistive">{getText('accessibility.page.location.dialog.search.query.label')}</label>
                        <input class="search-query text long-field" id="move-page-search-query">
                        <input type="button" value="{getText('search.name')}" class="button submit">
                    </div>
                    {if not $canMoveBetweenSpaces}
                        <div class="description warning">{getText('tip.cannot.move.page.between.spaces')}</div>
                    {/if}
                    {if not $canMoveHierarchyBetweenSpaces}
                        <div class="description warning">{getText('tip.cannot.move.page.between.spaces.removeown')}</div>
                    {/if}
                </fieldset>
            </form>
        <div class="search-results">
        </div>
    </div>
{/template}

/**
 * Placeholder for error messages
 */
{template .errorMessage}
    <div id="move-errors" class="hidden warning"></div>
{/template}

/**
 * Message to be displayed when no matching page is found
 */
{template .noMatchingPages}
    <ol><li><span class="warning">{getText('move.page.dialog.location.parent.page.no.results')}</span></li></ol>
{/template}

/**
 * Message to be displayed when no matching spaces is found
 */
{template .noMatchingSpaces}
    <ol><li><span class="warning">{getText('move.page.dialog.location.space.no.results')}</span></li></ol>
{/template}

/**
 * Placeholder when loading search results
 */
{template .searchResultsLoading}
    <div class="searching">{getText('move.page.dialog.search.searching')}</div>
{/template}

/**
 * Placeholder when loading page history
 */
{template .pageHistoryLoading}
    <div class="searching">{getText('move.page.dialog.history.loading')}</div>
{/template}

/**
 * Placeholder when loading a panel
 */
{template .panelLoading}
    <span>{getText('move.page.dialog.loading')}</span>
{/template}

/**
 * Render an empty space list for the browse panel
 * @param linkText the link text to be displayed
 */
{template .browsePanelSpace}
    <ul><li id='tree-root-node-item' class='root-node-list-item'><a class='root-node' href='#'>{$linkText}</a></li></ul>
{/template}

/**
 * Placeholder when ordering pages
 */
{template .orderingPagePanel}
<div id="orderingPlaceHolder"></div>
{/template}

/**
 * Render a reorder checkbox option
 */
{template .reorderCheckbox}
<span id="reorderRequirement"><input id="reorderCheck" type="checkbox" name="reorderFlag" title="{getText('move.page.dialog.order.button.tooltip')}"/>
<label for="reorderCheck" title="{getText('move.page.dialog.order.button.tooltip')}">{getText('move.page.dialog.order.button')}</label></span>
{/template}

/**
 * A template for a dialog help link
 */
{template .helpLink}
    {call Confluence.Templates.Dialog.helpLink}
        {param href: docLink('help.moving.page') /}
    {/call}
{/template}


/**
 * A template for the history panel of the move page dialog.
 *
 * @param pageTitle the title of the current page
 */
{template .historyPanel}
    <div class="row information">
        <div class="inner">
            <div class="element">
                {getText('tip.edit.movepage.history', $pageTitle)}
            </div>
        </div>
    </div>
    <div id="move-page-search-container" class="row">
        <div class="search-results">
        </div>
    </div>
{/template}


/**
 * A template for the history panel of the move page dialog.
 *
 * @param pageTitle the title of the current page
 */
{template .browsePanel}
    <div class="row information">
        <div class="inner">
            <div class="element">
                {getText('tip.edit.movepage', $pageTitle)}
            </div>
        </div>
    </div>
    <div class="tree"></div>
{/template}

/**
 * Render a spinner
 */
{template .spinnerButton}
<div class='button-spinner'></div>
{/template}

/**
 * Render a status
 */
{template .statusMessage}
<div class='status'></div>
{/template}

/**
 * @param errors the errors that need to be displayed
 */
{template .errorList}
    {getText('errors.occurred')}
    <ul>
        {foreach $error in $errors}
            <li>{$error}</li>
        {/foreach}
    </ul>
{/template}

